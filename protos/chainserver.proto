// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.jmpjmpjmp.lets.chainserver";
option java_outer_classname = "ChainServerProto";
option objc_class_prefix = "CSER";

package chainserver; //connect manager

// The connect operator service definition.
service ChainServer {
	//get connections from other peer
	rpc Connect(MsgBlock) returns (Empty) {}
	//nofity the peer of a message, note this is not called from this node
	//e.g. if this node is A, it should be called from B instead of A
	//NOTE: Reply is only for notifying the sender whether the message has
	//been received or not, if the server wants to send some data back, it
	//it needs to call the sender's `SendMsg` method.
        rpc SendMsg(MsgBlock) returns (Empty) {}
	//rpc GetBlock(MsgBlock) returns (stream Block) {}
}

message Empty {

}

enum MsgType {
        NEW_PEER = 0;
	GET_BLOCK = 1;
	SEND_BLOCK = 2;
	GET_NODES = 3;
	SEND_NODES = 4;
	GET_TX = 5;
	SNED_TX = 6;
	QUIT = 7;
	GET_CMD = 8; //get command from local cli
}

message MsgBlock {
	MsgType type = 1;
	string data = 2;
}

//the data structures below mimics bitcoin
//see https://bitcoin.org/en/developer-reference#block-headers
message Transaction {
	
}

message BlockHeader {
	uint32 version = 1;
	bytes prev_header_hash = 2;
	bytes merkel_root_hash = 3;
	uint32 time = 4; //Unix epoch time when the miner started hashing the header(according to miner).Must be strictly greater than the median time of the previous 11 blocks.
	uint32 nBits = 5; //target threshold this blockâ€™s header hash must be less than or equal to
	uint32 nonce = 6;
}

message Block {
	BlockHeader header = 1;
	int32 txn_count = 2; //number of transactions
	Transaction txns = 3;	
}

